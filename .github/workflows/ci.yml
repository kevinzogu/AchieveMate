name: PAM GPI LOTTERY CI

on:
  workflow_dispatch:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # ────────────────────────────────
  # 1. Build ‑ Test ‑ SonarCloud
  # ────────────────────────────────
  build-and-analyze:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0           # Shallow clones off për analiza më të mira

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Build & Test with Maven
        run: |
          mvn -B clean verify jacoco:report

      - name: Run SonarCloud Analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}   # për sonar.pullrequest.github
          SONAR_TOKEN:  ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn -B sonar:sonar \
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

      - name: Build Docker image (opsionale)
        if: success()
        run: |
          echo "Docker build here nëse duhet…"
          # docker build -t your-image:${{ github.sha }} .

  # ────────────────────────────────
  # 2. Slack notification
  # ────────────────────────────────
  slack-notify:
    needs: build-and-analyze
    runs-on: ubuntu-latest
    if: always()        # Ekzekuto edhe në rast dështimi

    steps:
      - name: Wait a bit që SonarCloud të procesojë
        run: sleep 30

      # ───────────── Merr rezultatet nga SonarCloud ─────────────
      - name: Get SonarCloud results
        id: sonar
        env:
          SONAR_TOKEN:       ${{ secrets.SONAR_TOKEN }}
          SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
        run: |
          set -e
          call_api() {
            curl -s -u "$SONAR_TOKEN:" "$1"
          }

          # Quality Gate
          status_json=$(call_api "https://sonarcloud.io/api/qualitygates/project_status?projectKey=$SONAR_PROJECT_KEY")
          gate_status=$(echo "$status_json" | jq -r '.projectStatus.status // "UNKNOWN"')

          # Metrics
          metrics_json=$(call_api "https://sonarcloud.io/api/measures/component?component=$SONAR_PROJECT_KEY&metricKeys=bugs,vulnerabilities,code_smells,coverage,duplicated_lines_density,reliability_rating,security_rating,sqale_rating,ncloc")
          get_metric() {
            echo "$metrics_json" | jq -r --arg key "$1" '.component.measures[] | select(.metric==$key) | .value // "0"'
          }

          echo "project_status=$gate_status"                   >> "$GITHUB_OUTPUT"
          echo "bugs=$(get_metric bugs)"                       >> "$GITHUB_OUTPUT"
          echo "vulnerabilities=$(get_metric vulnerabilities)" >> "$GITHUB_OUTPUT"
          echo "code_smells=$(get_metric code_smells)"         >> "$GITHUB_OUTPUT"
          echo "coverage=$(get_metric coverage)"               >> "$GITHUB_OUTPUT"
          echo "duplicated_lines=$(get_metric duplicated_lines_density)" >> "$GITHUB_OUTPUT"
          echo "reliability_rating=$(get_metric reliability_rating)"     >> "$GITHUB_OUTPUT"
          echo "security_rating=$(get_metric security_rating)"           >> "$GITHUB_OUTPUT"
          echo "maintainability_rating=$(get_metric sqale_rating)"       >> "$GITHUB_OUTPUT"
          echo "lines_of_code=$(get_metric ncloc)"                       >> "$GITHUB_OUTPUT"
          echo "sonar_url=https://sonarcloud.io/summary/new_code?id=$SONAR_PROJECT_KEY" >> "$GITHUB_OUTPUT"

      # ───────────── Dërgo payload‑in “flat” në Slack ─────────────
      - name: Send payload to Slack workflow
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_TRIGGER_URL }}

          # GitHub metadata
          PROJECT_NAME:  ${{ github.event.repository.name }}
          BRANCH_NAME:   ${{ github.ref_name }}
          BUILD_STATUS:  ${{ needs.build-and-analyze.result }}
          COMMIT_SHA:    ${{ github.sha }}
          COMMIT_MSG:    ${{ github.event.head_commit.message }}
          TRIGGERED_BY:  ${{ github.actor }}

          # SonarCloud outputs
          SONAR_STATUS:          ${{ steps.sonar.outputs.project_status }}
          SONAR_BUGS:            ${{ steps.sonar.outputs.bugs }}
          SONAR_VULNERABILITIES: ${{ steps.sonar.outputs.vulnerabilities }}
          SONAR_CODE_SMELLS:     ${{ steps.sonar.outputs.code_smells }}
          SONAR_COVERAGE:        ${{ steps.sonar.outputs.coverage }}
          SONAR_DUP_LINES:       ${{ steps.sonar.outputs.duplicated_lines }}
          SONAR_RELIABILITY:     ${{ steps.sonar.outputs.reliability_rating }}
          SONAR_SECURITY:        ${{ steps.sonar.outputs.security_rating }}
          SONAR_MAINTAINABILITY: ${{ steps.sonar.outputs.maintainability_rating }}
          SONAR_LOC:             ${{ steps.sonar.outputs.lines_of_code }}
          SONAR_URL:             ${{ steps.sonar.outputs.sonar_url }}
        run: |
          # Truncate commit message në 100 karaktere
          short_msg=$(echo "$COMMIT_MSG" | head -c 100)
          [ ${#COMMIT_MSG} -gt 100 ] && short_msg="${short_msg}..."

          # Ndërto JSON‑in flat
          jq -n \
            --arg project_name   "$PROJECT_NAME" \
            --arg branch_name    "$BRANCH_NAME" \
            --arg build_status   "$BUILD_STATUS" \
            --arg commit_sha     "${COMMIT_SHA:0:7}" \
            --arg commit_msg     "$short_msg" \
            --arg triggered_by   "$TRIGGERED_BY" \
            --arg sonar_status   "$SONAR_STATUS" \
            --arg sonar_bugs     "$SONAR_BUGS" \
            --arg sonar_vuln     "$SONAR_VULNERABILITIES" \
            --arg sonar_smells   "$SONAR_CODE_SMELLS" \
            --arg sonar_cov      "$SONAR_COVERAGE" \
            --arg sonar_dup      "$SONAR_DUP_LINES" \
            --arg sonar_rel      "$SONAR_RELIABILITY" \
            --arg sonar_sec      "$SONAR_SECURITY" \
            --arg sonar_maint    "$SONAR_MAINTAINABILITY" \
            --arg sonar_loc      "$SONAR_LOC" \
            --arg sonar_url      "$SONAR_URL" \
            '{
              project_name:        $project_name,
              branch_name:         $branch_name,
              build_status:        $build_status,
              commit_sha:          $commit_sha,
              commit_message:      $commit_msg,
              triggered_by:        $triggered_by,
              sonar_status:        $sonar_status,
              sonar_bugs:          $sonar_bugs,
              sonar_vulnerabilities:$sonar_vuln,
              sonar_code_smells:   $sonar_smells,
              sonar_coverage:      $sonar_cov,
              sonar_duplicated_lines:$sonar_dup,
              sonar_reliability:   $sonar_rel,
              sonar_security:      $sonar_sec,
              sonar_maintainability:$sonar_maint,
              sonar_lines_of_code: $sonar_loc,
              sonar_url:           $sonar_url
            }' > payload.json

          echo "Payload që po dërgohet te Slack:"
          cat payload.json | jq .

          # POST te webhook‑u i Slack‑ut (Trigger i Workflow‑it)
          curl -s -X POST -H "Content-Type: application/json" \
               --data @payload.json "$WEBHOOK_URL"
